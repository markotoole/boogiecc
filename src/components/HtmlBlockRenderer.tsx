import DOMPurify from 'isomorphic-dompurify'\n\ninterface HtmlBlockProps {\n  value: {\n    title?: string\n    htmlContent: string\n    sanitizeHtml?: boolean\n    allowedTags?: string[]\n    cssClasses?: string\n    inlineStyles?: string\n    environment?: 'all' | 'production' | 'development'\n  }\n}\n\nexport default function HtmlBlockRenderer({ value }: HtmlBlockProps) {\n  const {\n    htmlContent,\n    sanitizeHtml = true,\n    allowedTags = [],\n    cssClasses = '',\n    inlineStyles = '',\n    environment = 'all'\n  } = value\n\n  // Environment check\n  const isDevelopment = process.env.NODE_ENV === 'development'\n  const isProduction = process.env.NODE_ENV === 'production'\n  \n  if (environment === 'development' && !isDevelopment) return null\n  if (environment === 'production' && !isProduction) return null\n\n  // Prepare HTML content\n  let processedHtml = htmlContent\n\n  if (sanitizeHtml) {\n    // Default safe tags if none specified\n    const defaultAllowedTags = [\n      'p', 'br', 'strong', 'em', 'b', 'i', 'u', 'span', 'div', \n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n      'ul', 'ol', 'li', 'a', 'img', 'blockquote', 'code', 'pre'\n    ]\n    \n    // Parse comma-separated tags from allowedTags array\n    const parsedAllowedTags = allowedTags.length > 0 \n      ? allowedTags.flatMap(tag => tag.split(',').map(t => t.trim()))\n      : defaultAllowedTags\n\n    // Sanitize HTML\n    processedHtml = DOMPurify.sanitize(htmlContent, {\n      ALLOWED_TAGS: parsedAllowedTags,\n      ALLOWED_ATTR: ['href', 'src', 'alt', 'title', 'class', 'id', 'style', 'target', 'rel'],\n      ALLOW_DATA_ATTR: false,\n      FORBID_SCRIPT: true,\n      FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'button'],\n      KEEP_CONTENT: true\n    })\n  }\n\n  // Prepare wrapper styles\n  const wrapperStyle = inlineStyles ? { cssText: inlineStyles } : {}\n  const wrapperClasses = `html-block ${cssClasses}`.trim()\n\n  return (\n    <div \n      className={wrapperClasses}\n      style={wrapperStyle}\n      dangerouslySetInnerHTML={{ __html: processedHtml }}\n    />\n  )\n}\n\n// Safe HTML component with additional security measures\nexport function SafeHtmlBlock({ value }: HtmlBlockProps) {\n  const { htmlContent, sanitizeHtml = true } = value\n\n  // Always sanitize in Safe mode\n  const cleanHtml = DOMPurify.sanitize(htmlContent, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'b', 'i', 'span', 'div', 'h1', 'h2', 'h3', 'ul', 'ol', 'li', 'a'],\n    ALLOWED_ATTR: ['href', 'class'],\n    FORBID_SCRIPT: true,\n    FORBID_TAGS: ['script', 'object', 'embed', 'form', 'input', 'button', 'iframe'],\n    KEEP_CONTENT: true\n  })\n\n  return (\n    <div \n      className=\"safe-html-block prose prose-gray dark:prose-invert max-w-none\"\n      dangerouslySetInnerHTML={{ __html: cleanHtml }}\n    />\n  )\n}\n